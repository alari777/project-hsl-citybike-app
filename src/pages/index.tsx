import Head from 'next/head';
import { FC, useState } from 'react';
import { GetServerSidePropsContext } from 'next';
import { getTrips } from '@/pages/api/getTrips';
import homeStyles from '@/styles/Home.module.css';
import { formatTime } from '@/utils/formatTime/formatTime';
import TablePagination from '@/components/Index/TablePagination/TablePagination';
import Filters from '@/components/Index/Filters/Filters';

type TripType = {
  id: number;
  departureDate: string;
  coveredDistance: string;
  duration: string;
  returnDate: string;
  departureStationId?: number;
  returnStationId?: number;
  Stations_Trips_departureStationIdToStations: { nameFi: string };
  Stations_Trips_returnStationIdToStations: { nameFi: string };
};

type FiltersType = {
  coveredDistance: number;
  duration: number;
};

interface ManagePageProps {
  trips: TripType[];
}

const HomePage: FC<ManagePageProps> = ({ trips }) => {
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [tableTrips, setTableTrips] = useState<TripType[]>(trips);
  const [pageNumber, setPageNumber] = useState<number>(0);

  // This function makes request to server in order to get next N trip-records from DB.
  // + Filters.
  const onPageHandleClick = async (
    nextPageNumber: number,
    filters: FiltersType = { coveredDistance: 10, duration: 10 }
  ): Promise<void> => {
    setIsLoading(false);
    try {
      const { coveredDistance, duration } = filters;
      const response = await fetch(
        `/api/v1/trip/${nextPageNumber}?distance=${coveredDistance}&duration=${duration}`,
        {
          method: 'GET',
        }
      );
      if (response.status === 200) {
        const result: TripType[] = await response.json();
        setPageNumber(nextPageNumber);
        setTableTrips(result);
      }
    } catch (err) {}
    setIsLoading(true);
  };

  if (!isLoading) {
    return <h2>Wait a little bit. Data are loading ...</h2>;
  }

  return (
    <>
      <Head>
        <title>City Bike app</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
      </Head>
      <main className='main'>
        <div className={homeStyles.cla}>
          <TablePagination
            pageNumber={pageNumber}
            onPageHandleClick={onPageHandleClick}
          />
          <Filters
            pageNumber={pageNumber}
            onPageHandleClick={onPageHandleClick}
          />
          <table className='table'>
            <thead>
              <tr>
                <th scope='col'>#</th>
                <th scope='col'>ID</th>
                <th scope='col'>Departure Date</th>
                <th scope='col'>Return Date</th>
                <th scope='col'>Departure Station</th>
                <th scope='col'>Return Station</th>
                <th scope='col'>Covered Distance</th>
                <th scope='col'>Duration</th>
                <th scope='col'>Delete</th>
              </tr>
            </thead>
            <tbody>
              {tableTrips &&
                tableTrips.map((trip: TripType, index: number) => (
                  <tr key={trip.id}>
                    <th scope='row'>{index + 1}</th>
                    <td>{trip.id}</td>
                    <td>{formatTime(trip.departureDate)}</td>
                    <td>{formatTime(trip.returnDate)}</td>
                    <td>
                      {trip.Stations_Trips_departureStationIdToStations.nameFi}
                    </td>
                    <td>
                      {trip.Stations_Trips_returnStationIdToStations.nameFi}
                    </td>
                    <td>{trip.coveredDistance}m</td>
                    <td>{trip.duration}s</td>
                    <td>
                      <button>Delete</button>
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
          <TablePagination
            pageNumber={pageNumber}
            onPageHandleClick={onPageHandleClick}
          />
        </div>
      </main>
    </>
  );
};

export default HomePage;

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const result = await getTrips(0);
  const trips = JSON.parse(result);
  return {
    props: { trips }, // will be passed to the page component as props
  };
}
